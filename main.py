import asyncio
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

import openai


class ImagePrompt(StatesGroup):
    waiting_for_text = State()

model = "gpt-3.5-turbo" #Standart model

openai.api_base = "https://chimeragpt.adventblocks.cc/v1"
  
openai.api_key = "Q2zpQWk3Yan_Z5xw80b4W0aL_ehjwNsbzFnJ0U" #your api chimera key from discord

TOKEN = "6176486575:AAEQRanMuGyolp05bHpOKalb0sT71uMhwOdk" #your api key bot tg


owner_id = 1372715395 # your id, get your id @getmyid_bot

admin_ids = []

message_for_guest = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.\n–¶–µ–Ω–∞: 25 RUB/–ú–µ—Å—è—Ü\n–î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–ø–∏—à–∏—Ç–µ /dev_info"



logging.basicConfig(level=logging.INFO)



# Initialize bot and dispatcher

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)



@dp.message_handler(commands=['start', 'help'])

async def send_welcome(message: types.Message):

    admin_id = message.from_user.id

    if admin_id not in admin_ids and admin_id != owner_id:

        await message.reply(message_for_guest)

        return

    await message.reply("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å, –¥–ª—è —Å–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ /switch")

    if admin_id == owner_id:

        await asyncio.sleep(1)

        await bot.send_message(admin_id,

            f"–í—ã –≤–ª–∞–¥–µ–ª–µ—Ü, –¥–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/view_admins - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –±–æ—Ç–∞ (—Ç–µ, –∫—Ç–æ –º–æ–∂–µ—Ç –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)\n/add_admin - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–Ω —Å–º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º). –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_admin 2, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å id 2\n/remove_admin - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ü—Ä–∏–º–µ—Ä: /remove_admin 2, –≥–¥–µ –º—ã —É–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å id 2\n–í–∞—à ID: {owner_id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /switch
@dp.message_handler(Command("switch"))
async def switch_models(message: types.Message):
    admin_id = message.from_user.id

    if admin_id not in admin_ids and admin_id != owner_id:

        await message.reply(message_for_guest)

        return
    keyboard = InlineKeyboardMarkup(row_width=2)
    models = [
        "gpt-4",
        "gpt-3.5-turbo",
        "claude-instant-100k",
        "claude-instant",
        "claude+",
        "gpt-4-poe",
        "gpt-3.5-turbo-poe",
        "Sage"
    ]
    for model in models:
        keyboard.add(InlineKeyboardButton(model, callback_data=model))
    await message.reply("–í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
@dp.callback_query_handler(lambda c: c.data in [
    "gpt-4",
    "gpt-3.5-turbo",
    "claude-instant-100k",
    "claude-instant",
    "claude+",
    "gpt-4-poe",
    "gpt-3.5-turbo-poe",
    "Sage"
])
async def choose_model(callback_query: types.CallbackQuery, state: FSMContext):
    global model
    model = callback_query.data
    await state.update_data(model=model)
    await bot.answer_callback_query(callback_query.id, f"–¢—ã –≤—ã–±—Ä–∞–ª –º–æ–¥–µ–ª—å: {model}")
    await callback_query.message.edit_reply_markup(reply_markup=None)

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ admin_ids

@dp.message_handler(commands=("view_admins"))

async def view_admins(message: types.Message):

    if message.from_user.id == owner_id:

        admins_list = "\n".join(str(admin_id) for admin_id in admin_ids)

        await message.reply(f"–°–ø–∏—Å–æ–∫ admin_ids:\n{admins_list}")

    else:

        await message.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. ')



# –£–¥–∞–ª–µ–Ω–∏–µ admin_id –∏–∑ —Å–ø–∏—Å–∫–∞

@dp.message_handler(commands=("remove_admin"))

async def remove_admin(message: types.Message):

    if message.from_user.id == owner_id:

        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç - admin_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

        try:

            admin_id = int(message.get_args())

        except (ValueError, TypeError):

            await message.reply("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π admin_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

            return



        if admin_id in admin_ids:

            admin_ids.remove(admin_id)

            await message.reply(f"ID: {admin_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.")

        else:

            await message.reply(f"ID: {admin_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")

    else:

        await message.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. ')





@dp.message_handler(commands=['add_admin'])

async def add_admin(message: types.Message):

    admin_id = message.from_user.id

    if message.from_user.id != owner_id:

        await message.reply("–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. ")

        return



    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    if len(message.text.split()) > 1:

        new_admin_id = int(message.text.split()[1])

        if new_admin_id not in admin_ids:

            admin_ids.append(new_admin_id)

            await message.reply("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

        else:

            await message.reply("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    else:

        await message.reply("–£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å.")



@dp.message_handler(Command('image'))
async def cmd_image(message: types.Message):
    admin_id = message.from_user.id

    if admin_id not in admin_ids and admin_id != owner_id:

        await message.reply(message_for_guest)

        return
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞:")
    # –ø–µ—Ä–µ–≤–æ–¥–∏–º –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ImagePrompt.waiting_for_text.set()

@dp.message_handler(state=ImagePrompt.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    try:
        await bot.send_message(message.from_user.id,"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞ –Ω–∞—á–∞–ª–∞—Å—å, –æ–∂–∏–¥–∞–π—Ç–µ üïì")
        prompt_text = message.text
        response = openai.Image.create(
            prompt=prompt_text,
            n=2,
            size="1024x1024"
        )
        for image in response['data']:
            await bot.send_photo(message.chat.id, photo=image['url'])
        await state.finish()
    except openai.error.APIError as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: "
        if hasattr(e, 'response') and 'detail' in e.response:
            error_message += e.response['detail']
        else:
            error_message += str(e)
        await message.answer(error_message)

@dp.message_handler(commands=['dev_info'])

async def send_dev_info(message: types.Message):

    from_u = message.from_user

    user_id, first_name, username, language_code, is_premium = from_u.id, from_u.first_name, from_u.username, from_u.language_code, from_u.is_premium



    await message.reply(f"–í–∞—à ID: {user_id}\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –ø—Ä–∞–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @trainee_developer –∏ —Å–æ–æ–±—â–∏—Ç–µ –≤–∞—à ID")

    await bot.send_message(owner_id, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /dev_info:\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nUser ID: {user_id}\nFirst Name: {first_name}\nUsername: @{username}\nLanguage Code: {language_code}\nTelegram Premium: {is_premium}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")




@dp.message_handler()

async def response_all(message: types.Message):

    admin_id = message.from_user.id

    if admin_id not in admin_ids and admin_id != owner_id:

        await message.reply(message_for_guest)

        return

    message_text = ''

    if message.chat.type == "private":

        message_text = message.text

        await message.reply("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –æ–∂–∏–¥–∞–π—Ç–µ!")

        response = await bing_chat(message_text)
        await bot.send_message(admin_id,f"–û—Ç–≤–µ—Ç –æ—Ç {model}:\n{response}")

async def bing_chat(message_text):
  response = openai.ChatCompletion.create(
    model=model,
    messages=[
        {'role': 'user', 'content': message_text},
    ],
    max_tokens=120
  )
  content = response['choices'][0]['message']['content']
  return content



if __name__ == '__main__':

    executor.start_polling(dp, skip_updates=True)
